{"ast":null,"code":"function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (reset && resetCount <= 50) {\n      resetCount++;\n\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\n\n\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? { ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\n\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(state) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n\n    if (element == null) {\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0; // DOM platform can return `window` as the `offsetParent`.\n\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max); // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\n\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\n\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\n\n\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place.\n\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check.\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ? // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) : // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0, // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n\n    default:\n      return [];\n  }\n}\n\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n\n  return list;\n}\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\n\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(state) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing.\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        } // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n\n\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement; // Otherwise fallback.\n\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n\n                if (placement) {\n                  resetPlacement = placement;\n                }\n\n                break;\n              }\n\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\n\n\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'hide',\n    options,\n\n    async fn(state) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = state;\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n\n    prevRect = rect;\n  }\n\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\n\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        } // There are 2 or more connected rects.\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nasync function convertValueToCoords(state, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(state) : value; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\n\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\n\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\n\n\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(state) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\n\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n\n      if (isXAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n\n      await apply({ ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"sources":["/Users/steventran/Desktop/stevenelection/politian/node_modules/@floating-ui/core/dist/floating-ui.core.browser.mjs"],"names":["getAlignment","placement","split","getLengthFromAxis","axis","getSide","getMainAxisFromPlacement","includes","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","name","fn","nextX","nextY","data","reset","initialPlacement","elements","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","min","Math","max","within","min$1","value","max$1","arrow","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","center","offset","shouldAddOffset","alignmentOffset","centerOffset","sides","allPlacements","reduce","acc","concat","oppositeSideMap","getOppositePlacement","replace","getAlignmentSides","alignment","mainAlignmentSide","main","cross","oppositeAlignmentMap","start","end","getOppositeAlignmentPlacement","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","detectOverflowOptions","placements","undefined","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByMostSpace","map","d","slice","v","sort","a","b","placementsThatFitOnEachSide","every","resetPlacement","getExpandedPlacements","oppositePlacement","getSideList","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","flip","_middlewareData$flip","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","isBasePlacement","push","overflowsData","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$map$so","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","getBoundingRect","minX","minY","maxX","maxY","getRectsByLine","sortedRects","groups","prevRect","inline","nativeClientRects","Array","from","getClientRects","clientRects","fallback","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","apply","isXAxis","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions"],"mappings":"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","sourcesContent":["function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = state;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nasync function convertValueToCoords(state, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(state) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(state) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isXAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"]},"metadata":{},"sourceType":"module"}